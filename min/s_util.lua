function do_key_swap(_src_tile,_dst_tile,_src_tl,_dst_tl)local _tile,_tgt_tile,_tgt_tl,_tx,_ty,_block,_doflip for _x=32,48do for _y=0,16do _tgt_tile,_tile=nil,mget(_x,_y)if mget(_x+16,_y)&2==0then if _tile==_src_tile then _tgt_tile,_tgt_tl,_block=_dst_tile,_dst_tl,1elseif _tile==_dst_tile then _tgt_tile,_tgt_tl,_block=_src_tile,_src_tl,0end if _tgt_tile~=nil then _doflip=_dst_tl<56mset(_x,_y,_tgt_tile)mset(_x+16,_y,_block)_tx,_ty=(_x-32<<1)+1,(_y<<1)+1if(_doflip)put_mirrored_tile(_tx,_ty,_tgt_tl)else put_x16_tile(_tx,_ty,_tgt_tile)
end end end end end function lerp(a,b,t)return a+(b-a)*t end function add_undo()local _undo={}_undo.obj_list={}for _k,_v in pairs(g_o_list)do _undo.obj_list[_k]=g_o_list[_k]end local _player=g_o_list[1]_undo.player_x,_undo.player_y,_undo.player_dir,_undo.player_pstate,_undo.player_coins,_undo.tiles_touched,_undo.player_octogems,_undo.player_haskey,_undo.zapper_turn=_player.startturnx,_player.startturny,_player.dir,_player.pstate,g_p_coins,g_s_touched,g_p_octog,_player.haskey,g_p_zap_turn add(g_u_list,_undo)_undo.playfield_walls,_undo.playfield_slime,_undo.playfiend_main=pack_undo_tiles(32,16),pack_undo_tiles(48,16),pack_undo_tiles(0,32)if(count(g_u_list)>20)deli(g_u_list,1)
end function perform_undo()local _count=count(g_u_list)if(_count==0)return
local _undo=g_u_list[_count]if(_count>1)deli(g_u_list)
g_o_list=_undo.obj_list local _player=g_o_list[1]_player.x,_player.y,_player.oldx,_player.oldy,_player.anim,_player.dir,_player.pstate,g_p_coins,g_s_touched,g_p_octog,_player.haskey,g_p_zap_turn=_undo.player_x,_undo.player_y,_undo.player_x,_undo.player_y,1,_undo.player_dir,_undo.player_pstate,_undo.player_coins,_undo.tiles_touched,_undo.player_octogems,_undo.player_haskey,_undo.zapper_turn g_new_dir,g_level_lose,_player.isdead,g_updt_coin,g_updt_zap,_player.ismove=-1,false,false,true,true,false unpack_undo_tiles(_undo.playfield_walls,32,16)unpack_undo_tiles(_undo.playfield_slime,48,16)unpack_undo_tiles(_undo.playfiend_main,0,32)end function pack_undo_tiles(_offset_x,_size)local _t={}for _x=0,_size do _t[_x]={}for _y=0,_size do _t[_x][_y]=mget(_x+_offset_x,_y)end end return _t end function unpack_undo_tiles(_t,_offset_x,_size)for _x=0,_size do for _y=0,_size do mset(_x+_offset_x,_y,_t[_x][_y])end end end function proc_cracked_floor(_x,_y)if(mget(_x+32,_y)~=9)return false
place_puzz_tile(_x,_y,192)mset(_x+48,_y,0)mset(_x+32,_y,0)proc_cracked_floor(_x-1,_y)proc_cracked_floor(_x+1,_y)proc_cracked_floor(_x,_y-1)proc_cracked_floor(_x,_y+1)return true end function find_tile_loc(_tile)local _w,_h=g_p_fst.l_width+32,g_p_fst.l_height for _dx=32,_w do for _dy=0,_h do if(mget(_dx,_dy)==_tile)return{x=_dx-32,y=_dy}
end end return nil end function put_x16_tile(_x,_y,_tile)put_tiles_fin(_x,_y,_tile,_tile+1,_tile+16,_tile+17)end function put_mirrored_tile(_x,_y,_tile)put_tiles_fin(_x,_y,253,_tile,253,_tile+16)end function put_1x4_tile(_x,_y,_tile)put_tiles_fin(_x,_y,_tile,_tile,_tile,_tile)end function put_tiles_fin(_x,_y,_tl,_tr,_bl,_br)mset(_x,_y,_tl)mset(_x+1,_y,_tr)mset(_x,_y+1,_bl)mset(_x+1,_y+1,_br)end function draw_wavy_text(_str,_x,_y,_col,_px)local _len=#_str for i=1,_len do _x=print(sub(_str,i,i),_x,_y+sin(g_wavy_anim+i/10)*_px,_col)end end function print_shd(_str,_x,_y,_col,_bg)?_str,_x+1,_y+1,_bg
return print(_str,_x,_y,_col)end function format_time(_num)return(_num>=60and flr(_num/60)..":"or"")..sub(flr(_num%60)+100,2,3).."."..sub(flr(_num%1*1000)+1000,2,4)end function str2tbl(_str,_delimiter)local _t,_at,_offset={},#_str\_delimiter for _aa=1,_at do _t[_aa]={}_offset=(_aa-1)*_delimiter for i=1,_delimiter do _offset+=1add(_t[_aa],subl(_str,_offset,0,1))end end return _t end function subl(_str,_offset,_len,_flag)return tonum(sub(_str,_offset,_offset+(_len and _len or 0)),_flag)end