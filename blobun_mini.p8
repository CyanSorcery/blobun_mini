pico-8 cartridge // http://www.pico-8.com
version 42
__lua__


function _init()

 -- move compressed data to the general use space, then clear everything
 memcpy(0x8000, 0x0, 0x4300)
 memset(0x0, 0, 0x4300)

 -- figure out what kind of compressed data we have
 g_px9_sprites, g_px9_spr_flags, g_px9_music = {}, {}, {}

 local _offset, _data = 0x8000, peek2(0x8000)
 -- note: this table matches the type order
 local _t = {g_px9_sprites, g_px9_spr_flags, g_px9_music}
 while _data != 0 do
  -- figure our what type of data we have, offset, and length
  add(_t[(_data >> 13)&0x7], _offset+2)
  -- move forward and see what the next data is
  _offset += 2 + (_data&0x1fff)
  _data = peek2(_offset)
 end

 -- tile lut
 #include res/r_tile_lut.lua
 -- camera position
 g_cam_x, g_cam_y = 0, -8
 -- levels
 #include res/r_levels.lua

 g_fillp_diag = {0x936c, 0x36c9, 0x6c93, 0xc936}
 g_fillp_anim, g_wavy_anim = 0, 0

 g_player_blink = 5

 g_even_frame = false

 -- objects/hint arrows that are in the playfield
 g_object_list, g_arrow_list = {}, {}

 -- current level
 g_level_index = 1
 -- for level select
 g_level_select = g_level_index
 -- current level name
 g_level_name = "Unset"
 -- current level data
 g_level_data = {}
 -- current level size
 g_level_width, g_level_height = 1, 1

 -- how long the level table is
 g_level_arrlen = 1
 -- how many tiles the level has/been touched
 g_level_tiles, g_level_touched = 0, 0
 -- used for input buffering
 g_new_dir = -1
 -- used to detect when sprint has just been pressed
 g_btn4_held = false
 -- when the player has won, this is set
 g_level_win = false
 -- when the player has lost, this is set
 g_level_lose = false

 -- how many puzzle coins/octogems the player has
 g_puzz_coins, g_puzz_octogems = 0, 0
 -- if the player is on a conveyer/portal this turn
 g_puzz_on_convey, g_puzz_use_portal = false, false
 -- what turn the floor zappers are on. 012 = cmy
 g_puzz_zapper_turn, g_redraw_zappers = 0, true

 -- we need to redraw the coins blocks?
 g_redraw_coin = false

 -- table for objects we need to delete
 g_obj_delete = {}

 -- lookup table for water/lava shimmer
 g_shimmer_water = 0b1111000111110000.1110000111111000
 g_shimmer_offset = 0

 -- slime trail animation
 g_slime_trail_anim = 0

 -- undo queue
 g_undo_queue = {}

 -- when animating the bottom message, this is incremented
 g_bottom_msg_anim = 0

 -- particle table
 g_particles = {}

 -- tmp, decompress sprites and music now
 decompress_sprites(1)
 decompress_music(1)

 -- store data in a dummy cart
 --cstore(0x0, 0x0, 0x4300, "dummy.p8")

 -- unpack the first level
 unpack_level(g_level_index)

end


function _update()
 -- run fillp animation
 g_fillp_anim += 0.2
 g_fillp_anim %= 4
 -- update wavy factor
 g_wavy_anim += 0.035
 g_wavy_anim %= 1
 -- update blinking
 g_player_blink -= 1
 if (g_player_blink <= 0) g_player_blink = 30 + flr(rnd(60))

 g_even_frame = g_even_frame == false

 g_slime_trail_anim += 0.075
 g_slime_trail_anim %= 1

 g_bottom_msg_anim = mid(0, (g_level_win or g_level_lose) and g_bottom_msg_anim + 0.2 or g_bottom_msg_anim - 0.2, 1)

 -- process objects
 proc_objects()
 proc_particles()
end

function _draw()
 
 draw_gameplay()
 
--show sprite table
--palt(0, false)
--spr(0,0,0,16,16)
--palt()

end

-->8

-- this function unpacks the level to the top left corner of the map
function unpack_level(_index)
 -- clear the map to be ready for incoming data
 memset(0x2000, 0, 0x1000)
 -- reset the drawlist for the incoming elements
 g_object_list, g_arrow_list, g_undo_queue = {}, {}, {}
 g_level_tiles, g_level_touched, g_bottom_msg_anim, g_puzz_coins, g_puzz_octogems = 0, 0, 0, 0, 0
 g_redraw_coin, g_btn4_held, g_level_win, g_level_lose = true, false, false, false
 g_puzz_zapper_turn, g_redraw_zappers, g_particles = 0, true, {}
 -- clamp this output
 local _index = mid(1, _index, count(g_levels))
 -- store the level index
 g_level_index = _index
 g_level_select = _index

 -- add menuitems for this
 
 menuitem(1, "restart puzzle",
 function()
  unpack_level(g_level_index)
 end
 )
 menuitem(2, "skip puzzle",
  function()
   unpack_level(g_level_index + 1)
  end
 )
 
 -- debug function
 menuitem(3, "goto stage "..tostr(g_level_select),
  function(b)
   if (b&2 > 0) g_level_select += 1
   if (b&1 > 0) g_level_select -= 1
   g_level_select = mid(1, g_level_select, count(g_levels))
   menuitem(nil, "goto stage "..tostr(g_level_select))
   if (b&32) then
    unpack_level(g_level_select)
    return false
   end
   return true
  end
 )

 -- get the level data
 local _data = g_levels[_index]
 -- find out how long the title is
 local _title_len = tonum(sub(_data, 1, 1), 0x1)
 -- store the level name
 g_level_name = sub(_data, 2, 1 + _title_len)
 -- store the stage width
 _level_width = tonum(sub(_data, 2 + _title_len, 2 + _title_len), 0x1)
 g_level_width = _level_width
 -- get ready to parse the level data
 local _level_data = {}
 -- how long is our level data?
 local _offset = 3 + _title_len
 -- ashe note: we shouldn't need the 0x here, but for whatever reason it wont work without it
 local _data_len = tonum("0x"..sub(_data, _offset, _offset + 1, 0x1))
 g_level_height = (_data_len / g_level_width) >> 1
 -- read the data
 -- coco note: since we have to add 2 to the offset to get past the
 -- data length bytes, go ahead and save a call here by chaining it into the loop
 local _tile, _x, _y, _mod = 0, 1, 1, 0
 -- convert the level width to grid tile space, offset by one
 _level_width = (_level_width << 1) + 1
 for i=1,_data_len do
  _offset += 2
  _tile = tonum(sub(_data, _offset, _offset + 1), 0x1)
  _level_data[i] = _tile
  _mod = ((_x + _y) % 4 == 2) and 1 or 0
  -- now, read this out onto the playfield
  if (_tile > 0) then
   put_mirrored_tile(_x, _y, 16 + _mod)
  end
  -- move ahead in the tileset, moving to the next row as needed
  _x += 2
  if (_x >= _level_width) then
   _x = 1
   _y += 2
  end

 end
 -- pass it to the global var
 g_level_data = _level_data
 local _level_arrlen = count(_level_data)
 g_level_arrlen = _level_arrlen
 

 -- do the autotiling around the perimeter of the level
 local _tile, _mtl, _mtc, _mtr, _mcl, _mcc, _mcr, _mbl, _mbc, _mbr _xl, _xr, _yb = 0

 for _x=0,31 do
  -- set our left and right x, without going into the work area
  _xl, _xr = _x - 1, min(_x + 1, 31)
  -- re-initialize the top and center rows (assume they're 0)
  _mtl, _mtc, _mtr, _mcl, _mcc, _mcr = 0, 0, 0, 0, 0, 0
  for _y=0,31 do
   -- get the bottom row, without going into the work area
   _yb = min(_y + 1, 31)
   _mbl, _mbc, _mbr = mget(_xl, _yb), mget(_x, _yb), mget(_xr, _yb)

   -- don't do this unless the center tile is 0 since
   -- we can know in advance we wont put a tile on the puzzle floor
   if (_mcc == 0) then
-- figure out what each tile is gonna be
    _tile = calc_autotile(_mtl, _mtc, _mtr, _mcl, _mcc, _mcr, _mbl, _mbc, _mbr)
    -- place the tile into the work area?
    if (_tile > 0 and _tile < 15) mset(_x + 32, _y, _tile)
   end

   -- store these for the next row
   _mtl, _mtc, _mtr = _mcl, _mcc, _mcr
   _mcl, _mcc, _mcr = _mbl, _mbc, _mbr
  end
 end
 -- finally, copy the output data from the work area to the play area,
 -- while also clearing the work area for later usage
 for _x = 0,31 do
  for _y = 0,31 do
   -- copy the boundary from the work area over
   _tile = mget(_x + 32, _y)
   if (_tile > 0) mset(_x, _y, _tile)
   -- clear the work area
   mset(_x + 32, _y, 0)
  end
 end
 -- in the top right of the work area, mark all tiles as solid
 for _x=48,64 do
  for _y=0,16 do
   mset(_x, _y, 0)
  end
 end
 -- now, unpack the level data into the top left screen of the work area so we can read it easily
 -- get the level width data that we stored earlier
 _level_width = g_level_width
 _x, _y = 0, 0
 for i=1,_level_arrlen do
  _tile = _level_data[i]
  mset(_x + 32, _y, _tile)
  -- place a floor tile + allow collision here?
  -- note: 0 off means cant pass, 1 means can pass, 2 means slimed
  if (_tile != 0) then
   -- place free tile, may be overwritten below though
   mset(_x + 48, _y, 1)
   place_puzz_tile(_x, _y, _tile)
   g_level_tiles += 1
  end

  -- do we need to add objects to the object list?
  if (_tile == 33) player_create(_x, _y)
  -- puzzle keys
  for i=0,4 do
   if (_tile == 2 | (i << 5)) add(g_object_list, create_obj_key(_x, _y, i + 1, 83 + i))
  end
  
  -- state keys
  for i=0,2 do
   if (_tile == 8 | (i << 5)) add(g_object_list, create_obj_key(_x, _y, 5 + i, 230 + i))
  end

  -- arrows
  for i=0,3 do
   if (_tile == 17 | (i << 5)) add_hint_arrow(_x, _y, i)
  end

  -- octogem
  for i=0,7 do
   if (_tile == 15 | (i << 5)) add(g_object_list, create_obj_key(_x, _y, 8 + i, 87))
  end

  -- generic key
  if (_tile == 44) add(g_object_list, create_obj_key(_x, _y, 16, 159))

  _x += 1
  if (_x >= _level_width) then
   _y += 1
   _x = 0
  end
 end

 -- perform water/lava autotile
 calc_lava_water()

 -- slime where stephanie is at and record the first undo step
 player_end_move(g_object_list[1])
end

-- this places the graphical representation of the given tile
function place_puzz_tile(_x, _y, _tile_id)
 -- find the top left corner of the tile to place. if 0, do nothing
 local _offset = (_tile_id << 1) - 1
 local _tile_tl = tonum("0x"..sub(g_tile_lut, _offset, _offset+1))

 -- do we place a tile?
 if (_tile_tl != 0) then
  -- offset for cracked floors
  if (_tile_tl == 124 and (_x + _y) % 2 == 0) _tile_tl += 2
  -- figure out the map coordinates
  local _map_x, _map_y = (_x << 1) + 1, (_y << 1) + 1
  if (_tile_tl == 191 or _tile_tl == 207) then
   put_1x4_tile(_map_x, _map_y, _tile_tl)
  elseif (_tile_tl < 83) then
   put_mirrored_tile(_map_x, _map_y, _tile_tl)
  else
   put_x16_tile(_map_x, _map_y, _tile_tl)
  end
  -- block/unblock the playfield? -1: nothing, 0: block, 1: unblock
  local _state, _ele_id = -1, _tile_id & 0x1f
  if (_ele_id == 3 or _ele_id == 10) _state = 0 -- raised rgbc or ice block
  if (_ele_id == 4) _state = 1 -- lowered rgbc
  if (_state >= 0) mset(_x + 48, _y, _state)
 end
end

function calc_lava_water()
 -- note: this is similar to a function earlier in the code, see that for comments
 local _t = {176, 192}
 local _id, _id_m, _tile, _mtl, _mtc, _mtr, _mcl, _mcc, _mcr, _mbl, _mbc, _mbr _xl, _xr, _yb = 0
 local _w, _h = (g_level_width << 1) + 1, (g_level_height << 1) + 1
 for i=1,2 do
  _id = _t[i]
  _id_m = _id + 15
  for _x=0,_w do
   _xl, _xr = _x - 1, min(_x + 1, _w)
   _mtl, _mtc, _mtr, _mcl, _mcc, _mcr = 1, 1, 1, 1, 1, 1
   for _y=0,_h do
    _yb = min(_y + 1, _h)
    _mbl, _mbc, _mbr = (num_in_range(mget(_xl, _yb), _id, _id_m)) and 0 or 1,
       (num_in_range(mget(_x, _yb), _id, _id_m)) and 0 or 1,
       (num_in_range(mget(_xr, _yb), _id, _id_m)) and 0 or 1
    if (_mcc == 0) then
     _tile = calc_autotile(_mtl, _mtc, _mtr, _mcl, _mcc, _mcr, _mbl, _mbc, _mbr)
     -- place tile, optionally placing grid marker
     if (_tile > 0) mset(_x, _y, (_x % 2 == 0 and _y % 2 == 0 and _tile == 15) and _id or _id + _tile)

    end
    _mtl, _mtc, _mtr = _mcl, _mcc, _mcr
    _mcl, _mcc, _mcr = _mbl, _mbc, _mbr
   end
  end
 end
end

function calc_autotile(_mtl, _mtc, _mtr, _mcl, _mcc, _mcr, _mbl, _mbc, _mbr)
 local _tile = 0
 if (_mbl + _mbc + _mcl + _mcc == 0) _tile |= 1
 if (_mbr + _mbc + _mcr + _mcc == 0) _tile |= 2
 if (_mtr + _mtc + _mcr + _mcc == 0) _tile |= 4
 if (_mtl + _mtc + _mcl + _mcc == 0) _tile |= 8
 return _tile
end

-->8
-- for creating and processing objects

-- object table
-- 0: stephanie
-- 1: heart key
-- 2: diamond key
-- 3: triangle key
-- 4: coin key
-- 5: normal state
-- 6: fire state
-- 7: ice state
-- 8-15: octogems
-- 16: generic key

function proc_objects()

 -- fetch the object list
 local _obj_list = g_object_list
 local _obj_count, _dopart = count(_obj_list), true
 
 -- process each of the objects
 for i=1,_obj_count do
  _obj = _obj_list[i]
  _type = _obj.type
  
  if (_type == 0) then
   player_step(_obj)
  elseif (_obj.iskey) then
   -- puzzle key
   _obj.anim += 0.02
   _obj.anim %= 1
   _obj.spin += 0.035
   _obj.spin %= 1

  end
 end
 
 -- delete any objects marked for deletion
 local _poskey
 while (count(g_obj_delete) > 0) do
  _poskey, _obj_count = g_obj_delete[1], count(_obj_list)
  for i=1,_obj_count do
   if (_obj_list[i].pos == _poskey) then
    deli(_obj_list, i)
    break
   end
  end
  deli(g_obj_delete, 1)
 end
end


-- this adds a hint arrow on the floor
-- 0: right, 1: up, 2: left, 3: down
function add_hint_arrow(_x, _y, _dir)
 add(g_arrow_list, {
  dir=_dir,
  x=(_x << 4) + 12,
  y=(_y << 4) + 12
 })
end

-- this creates keys we can grab
function create_obj_key(_x, _y, _key, _spr)
 return {
    type=_key,
    iskey=true,
    x=(_x << 4) + 8,
    y=(_y << 4) + 5,
    pos=(_x << 4) | _y, -- positional key
    spr=_spr, -- our key sprite
    anim=rnd(1), -- animation offset
    spin=rnd(1), -- for rotating
 }
end



function decompress_sprites(_index)
 -- load them into the spritesheet area
 px9_decomp(0, 0, g_px9_sprites[_index], sget, sset)
 -- load the sprite flags into the screen data area
 px9_decomp(0, 0, g_px9_spr_flags[_index], pget, pset)
 -- copy the sprite flags to the correct spot
 memcpy(0x3000, 0x6000, 0xff)
end

function decompress_music(_index)
 -- load data into the screen area
 px9_decomp(0, 0, g_px9_music[_index], pget, pset)
 -- copy the music patterns
 memcpy(0x3100, 0x6000, 0x80)
 -- copy the sfx in the right spot
 memcpy(0x3200, 0x6080, 0x880)
end

-->8
-- includes
#include scripts/s_draw.lua
#include scripts/s_util.lua
#include scripts/s_player.lua
#include scripts/s_particles.lua
#include scripts/s_px9.lua

__gfx__
d6b2ffffff0ffffff0df7040fc93a8c2577aff73113994666bc466233999ca399856bc4c2b56269d231bf95930293e2d7af44ef85c33dfb82fff70c1c3a4c7e9
7c1f71514871c817171f48190715e16f8024ef1ef4e9444e0e4e5a44e29acd2f19324261e2ac3cf10640c2c0c541c7c2cbcb983110a11715e23cf71e4ef711ef
741152ef4f80f583053016c1c8b342c2c112cf002c111328fc6cdcf7c90a6f748392ff485874c521c5f4afd2fd7abc7f53b3f852e9877fcbf6e86bbf677b772e
9ce78c3f3cf0f3cf19f36ef8427ecf06fb4e7872edcec3aa9c5fc6f51369c19727d5f4ebbf81b6feb3e90ded72f4e2ded72f48ab5cdf4e93a68b2d3e89e77c87
e0ef2e8cc154b4ca5ad21961ac37c85a48693652ea323fc6e8323f1756a61102ee6642661a90e95c11a1e84619d212f66227b6a4ae945d3250cf63538c8a2e84
c19f3cf2e7913e6dd2574a9b21fc20233f762148356c11e84d7cf0e89c4ff0298b8f942cf69c08f13c199bce2bf2c367466cd6838051cf89448abef1ea4c1cf1
270742e3699340d84111cfa901694e2d72a79c3679c1ab368db990f52a0934070fb54088c794f88e51e0e7b361a3e12431bcc39280210cf694014c6e78c4d11b
9323174c6ed9c32de78583e95e704c24237cc3e897cf9b134ee7a22dd39b35784c39b7511e17f1bb3dbcd1746fb0198529c8849849fb830c01e02c090cc11680
811680786812131a1930c10938fbce859974ead1216a67ea5903d8c12166676a59033b77bbc17c6e836c174aea4d39b774836ce2e81bb832c7c10bbc77cc675e
6748764e8075e1ff8d399bc1f46e2fc31e2fd398bc55f2bffb83e17ff4ee3c5c1797e29bc579dfffb0d7c1f97e2b67f2f4eec396f947f4e0866070830c10e007
0830c1485c24d17ce87e9e2e8f91c162c31a5872c31e90d2c3140218729c81263991942b08687c6c41838f5043c31e9071868090dc454ae8443943616b783c3b
c4d1247361485a48d08d08d0850163468f3d14e3958de0e39f13c121e007083049b200f56e856e26c4ed5819de0fce0ab294524242c31a48212121a48fb905ee
5938f12c323a1e807136c8d012c8ff5d07c447ae3b50b1f40161c0685016140121a148f9942e91e89934ec921b190f056c821a480d0f0fb355268366e89afc66
7c10270868501a4680912468098c10add87227068366e856e24ae3d86948b80703c03c03c03e39f7c801b179e5a71417a2d3805630a580912468091e1e0390c7
9b159ce729b4e2e858762a348c0341a5861a32112981144f9e198c29d5c5c5a75832c31e90f4872c31e90fc8589e858729d3af31ffffac779d5e874eff7259b2
0ac5105ea08271369b2f83074ab9f10f50c1c10e927c7f7c87ef81fcf13e9f3431e0543c142933c378383e060f30e87c9af7802e36786d42f0244ba5e84dc15a
a3b62243c31d2d743edc71528651e2ef85c30c3680cf10458c3c3097834b252421d86218d3a2a9867a168274283aa21d81f41b5c42271d8d90299b4eac6f8485
52178be9df074236f4c1219c2f1707944a99ff107131c3c8384c0109442a81b0b95ecd2294ec56298b94cee0b4c798329c1165946869d29d715042bf587dacff
24ef42dcbeaa42c798f1834ef70237ddcf3a868b8f524e1f78f583643142a1140e78ff103dff58c5c8f2766f48ece0645287cf1e71610ff729ff58e13c2cf170
6a56e817484a211e916fbcf0e32709bd740bcf0ebc9370f4d761db2cb934853c17c293e09ec64318f5eff5c9cf6e83c99081c3fe0f487241c278b2b0a4942549
2981aa809ca8a55e1eacc31e1e29b87cac1448c9120d3b42139be87c62c12b61c39fc5279dffd2fa1f11e7029fe79b812c097a7097eeef1cb745c057e546ecd3
702b0f302bcf29c7fb4694832494ae80b80ee0fb48f52cf23f7cf22f7c4444e07d8036319830f9f1692c3e89cf12ff0ff0f3dcef0f80c190421907a9001e2408
0148f18fb8f38f922e11850b09442c73809004601210043cf21e79071f398881630958485821c012c181240c11e702cf00e2efa062650216163c84808784808f
32cb49790f37031b3001121610f4161ea2c2cf01e3e1e36cdc3c1884f10c2190b01612041a12041a1e1071f702cf21ac519e32094486221401e0054830c0c348
f93cf212c519e720840a9848d052063490801ac81fb190fbc0f9432e10c24342c1140824a020412803ac8fb821e70eb0d4ef87019629401610120280801010f7
0fb1f30ff8cf34561c083046823091acf1e8fb8f38f78ff850109a052254821699f180f301e702cf088cf344e4c087a0610f434ce09b9ff8b9fb2fcbfb4ae73e
4e0bf1ce02cebc3d4025a180a021a180a021a1039368fdd14b9ce98d3c544efff4839d818fd4f8577d1bd67048d85e07585694cd3942994a9042946294239429
07ad8287d17c8e1b8c1905952c8f109b05690042c312c280b0b07583803a021e9c4d4608c4e0c842e20c1452d8136c8136c8136c8136c8136ff7a42fc2069874
81e1071134808100000004200d0701641cb0e729026dcc3c998a9423942972c4294a229cf490cf6440701a2802daeea8f78809ff1a10ff301c116880e8e16396
ab422d960425861a5861a58610ff39441c10e06940f4cf2943ff3fcc2c2cf794a22d009410556243f842b02542199b29895a914294629423942945a08d0d0243
439c398721fd39e156932d4d31802a9121e90161485819c485c642487242c805225644e57052312296c8381805649136c8136c8136f383a16c3109050708381a
94db1e9019c23042c8400212121e164149174807c267c8d198c4383d03089a5c1231127088548c4809741905e0efb83ea4d1161bb3a597defff358f7de3e79cf
0fd3427e6390954429d424eb8096212d424a948be19f95e2e1b078d54ce0fc5c5cf0cf31e90ff3d1e1ea094580706801eb103647832cff39781820808792f681
f70735ef748052cb8cf110e0e1e5a48132cf0c5c149f731f1fb8c7197879b9501e6e780248f731f0f34e1f24619fd832421ff702cf899fb9b3c8f18f3058f18f
3a08f1c7f4eb63793df1f92f3c329cd7a4ef870c1c12768283839f79b8742c1c5c7edb8b8f18f72c31ef7a3c3c51e1e3e1ef0e72ef7dc3cf0cfff3e05ef048ff
b01efff123ef5e2ea0fb071f08ff962e706cf7c342cff081f368fb9b3c8f18f3058f18f3058f1c1fccf2fb4d7cdfcc9b36e7170ce8db909f17134e0ead668309
7eaa0f743fececfef890e88d595e79d3c0bfe71b833c68f7715bf3215fb856936468ebfb469d17e9468ef2fb429df27cf246022d0f7c11f52e2f1f10420446ec
069b61b324c272d40713938003d781fb8c14089590191100bc5a68bf1b42b8452252b44ad696e79032d51d6a936e809380bc583e02cc2e83802919e077187191
ee0129c12850c7cfd2ff3162908f2aa1974e8520f06cce8c1fb876e10e856c15560948136178036455813c69e24815e85268bc545c4269aabef16b0a906e1610
840371b70021cc8d3009022f76c3dc331022163cfb529c187e8a486932524b4f821a59daa7d19bfd7f92f4fcf1ef8b793775c55f58724157695e872cf3cf3cf2
4cac59e34ac59d34ac3995274836e70b8b297e11174e9b6612c0b726175816f6c2eb0349c5170ea6421075322e0c546e8486d146e09a724d1800428bc3c11042
8bc3c110428974493ef00f70c1fb0fd41c4d092934905028c1241e014e01a07022ff0ff79e3fd476209769c559f78fff83ef1e7983e706c1bcc08453972c81b8
74714c3161f85229c3161f8622ff80ef09fd6e1921d2f8e29365e484009d19745200b3e8a94006dc27cf1b4cf1b4e8f342e8f169932bc1dcf0f3469748367cf0
69b21addf2fa5eb48e62fb44e7942fb06e84374e0bbc97d5f6ece1d4c23b42d729bea8c3bbf8ef16f7c8ef13cf13cf3d70dd51b83be71a78df72b07081fff0e7
a96bd582202800ce886cf19935a99138cf022cf080f308f1d61844ab42fb4271939840c119b52cf042cd4a2bd1781e0970a75ceff0c5a04839d2c9c25f2b08f6
20d508522cff68182dd2e2b6d3c52d82e29e8eb27943f53598ff905e0e842f74e8cf2932ff48b97841b469ffb03e600404ffffff0de310842eefffff10000000
02000000000000000000000004ef729864e3e72a1e3ef7227171ff07179c12ffb7bf7cefff9cf0500cf8f3000cff327c102b46ffffff0ff7aef40821436579cd
aefbe19c4d574aaa97c3e237d79aa24e12fc4fa594b96e136e8f655aea37fab5d5f34ef0fb8abef94fe36787e5f38f34e9999c3333976662fccc4e899dce236c
0cea094c80b0910b0136c66c8dc24d62ff3a6ef83f7159c137817e1db56e2f784a179a5a1f8a4ed9bd836f8c2d87c16137817c1d9cc5e09cf3179f7c2f4c5e19
c71f8f427caf461d624eaafbedf3e793d67edfbcebf12e973979f673e21e2076e2fd4ee93c15675f6c4e9581f62dc6d8c28b6f162e103f5c787eec3d277887fc
f7e79dbf7cf297e2e2be3ff83a9f7af0f3070b0e70c1fdf3fcd8b80ff832e708f16e783e6e19cf28f388215109ef0884e6c9483d2e60fecf13c9c3297edf5c9f
8369c1b32fc3def0bb8fce90f75f793e8363f4e3b1f7cc6248f493f794d2b0e23634e013855225f0d9f36ef99f70cf209f369e7d888d5f707ec9fc1b57938b33
fb0ebd633f89db8df3770c8f5e0cf37f6bdabfef9835ce51044cc89f1ea462c6ffc8df3100e0cdb57b577d20269c1ec3c1bd6dabadcf3d42bc9fa9777e5ef8bf
2f982846e56ed4c9f0e1c18c5fb4cf114176aa0f34eb40f3000279b71b5c93f6ef17de2bcf0ee1f2f56df6fe1762907bdf0a2987e783fc6b48932ad174291f30
3d948a6f860487dadf78629116c421b6b2d1f13d863a946489e42492f97df3e8d593e873fe1bbad6e9e1c527e7e707d1fc1d07c10c3ea3d5df728b0c30e9de87
87e78f383ae2f9bea529bb2e1aea367c17d3c6346df4b21c70e407d6978f3e86cf17d5b7a97e2f87eab398bcedb067337d642c3493e01f4eace794ebc2e6122c
69f7ee83040c36cf23ff08160fd5f86b942fd9aedb89f762fcc3b66da7e8e574211799c3d3837248b16fdf34e051f47b539369977780f2196a22f9722884e184
8fe019f1c37878c6768324e57f2798fef85e1a6fbcf21b90f1626772211031fef2bd6b777dd1122b222cb2114e783c2ff484d14cab8df026f23c9e019366e706
c14c979ab2f48b293e795e16cb48f3801c403f7cc98985e5127f37e6bd1b7fa8db6278878ad6198ced70731bc0fec5003b6d19cf2e0fa8cf137ee8d27d6acf3e
d4ef137a0f71287e07df2bc078f5003fb872763fd5772f7cb18d518a0f09fe2bcf28eea901f30e8cb1f9db98b3ec3d3b3274f07ad7fc57f7d34e93c5df1eef72
66c29f76e2faf16f64354484326462e27111d044843f4cc7944c5e62b8668884644cc85e7977f6793c79ef0fd1e9e7d77f8df18329a7932f4e97bb398cb98339
cc1bdf1227a4ef04c6b98884439cf0e8de419f542722e9d631bf7285293c6bf88d74f7b8d6f3c17de475fd4f85e97ef8ba9f788cd7bce0dc5998c2f5c5ef8b6b
7229302e49cb454485ec8bc62b84209f2293611169f12e299c919c30119498880df1279ce374e9b87eabea3e98febef3fdbdcf12df32115cc2ef8c1b3f8d4dc9
ed9f5a288f70fa8f58c963f916a6244411b0e6956b7cc363f387401f70e953ff87675db1fc1b7eb4a9727d16ff484a62efa0f707edfb4c77bc51bc9170908fdc
91e702f78819f529cb1c40cf748f8c598b5674c6737842c0e785ddd7a75c159e12b38ccbfbc677fff167bdfff980fffffb11effff732cfffff648fffffd80fff
ffb11effff732cfffff648fffffd80fffffb11effff732cfffff648fffffd80fffffb11600b966ffffff0ff7aef40412386e57d9bfac621119d26c4b7ca2a972
f8bc4fbc14cc57ee1f8abeac3e557dd9f1cf1aeaf52ff8f7ec3c5ff4e3f86e13fa9bef94df1aeaf525f38acf31df1e457df3dfa7934ef938989bef9c37ddd87e
8df3e7932b9f74ef191360601299700b91363362fb87c6c1c9272f48b0127df3bf2db667df0717a4c3702d451ab057a0118dcf23fb82ffcce79b4294446e9385
29a2461a6244063b9913976d3ff9e9b36bf5e9344bfbc52ae00814031e666f060ebc583caad98c254762834181403164ca81839fc7c860191ea7d50ecf835ff3
7c5fe9f46ff89be23ff05ffc351c50e562ccf2c06ef1e2ff0e4ef0fbc57579dec3e2d3ff87e9d694cff739c6bd6bd6bd622222222222222f4abd12fc27542ff4
cf098b39c21fb48ab39cd94ef8bcd112ede263d598df12f5c9160ce792200ef87f83b5196f27203f42ec42fa1f52a1aef13bf3e96e05744202229c67838b89d1
2cf20000e78ff7cbe8554a42de17787f98bf161f640684bd67f5380e9c44469de1301ef1bc1c3cf239837c0326462360f38b5e7178875e0c1ff0f6c39e38c2e1
202e362622e8f1c1ef008c1705fcebb5ce834bf7cc0085e4e84f3185a80e1fcdea729945bf20aeb01175e79da29c91b84276883029c91f562422988e6332ccd7
e57edf3c4785c527a4e2ea75e3264c54e226427fdf3c3bc3bd99ad5e1e85637b4eac17c57529327d6b3c196eacf237017c5bee79e194ed83d19d67c9169beb3e
af5ecd99830cf367c8c35aae387240ed400742e53e07b6e0936fe23942b1e8743733e70934c8f1830c309a838f6ed55ac7294fa599c1161f83e8c17cf16be429
8d479752cbea30e0bc66fa3c5f9481ff8461067484461112e28c1a8451b3cf09d61f42e8582ff899c3ece1bf3824244d294aedc4e94cd4c1c65140e5978c8b2e
f95add1f2e70c4311d739aa68c4c0c8f56c06296eb354e393e88d42f3c154f79c12a603c0e78307c575cf24002e372575477a8c336e2c7757e112454c008b1f8
8f0a879afe5707d4fab2c4873f9f14cdffcc2e329bcf2fef1a1f837c5a9e1c79f763b0d373f0ffb1e6b3de071de3f54c88bff8c76eaef1bde0c267462f3c4cf3
3ff8747a3dac2f429d297cf19d29f1c19d44674cd9677c6be11ff5ad98c7bd37c67ce98f9e83e8df2d7c19cf0f47ba7422b98d270ce78c8f88b28f50bf08f32a
23a390946fb84c2e8442f895e1422498b28a83e21c6a69dda69b2b81c2338e1e312b8bd9bcdab570707c267462d98f36f749dbe85a2b9f078a46f3ae5affa093
06d7ec350bcf2f95372cef8c6700bf707c8899b5f57c19ac2f4a9e297c19d215fadebd6fd517f37c1bb6bd3f4cf7fc17cead6fe6fe3bd1fd71b42e702294edea
bc850b9ad2f2c29132eaf00bf06611766f9367c2429d921b83685cc690c8012eab00b706611bca264e1f7832d3615bdabbed0f5a273fcc1bf5280c3177a9f1a1
9f3ead5d77bd744c5bf1c1bb2a49cf011fb4a28764eb02074ead56fcf298f7a339fc27464c329340b7e90f0cdfbc374ed33f4f242f34ec8e6e837403f388952f
b4eb919f83ef836932d50fe76b72954eaadef80f149be70f944aab3e2714037c0e7c8a6e5b26f46b776bf785ea0db4d16ede175847b487ed74371b384a2b1c2f
3037199484842f8561d4be19b6f8178329db19385e5697895caf500994848c3169de4bd6bda9f607d8c3843fb0ce383e08cce12bd633b52ea4e9856b7404c3fb
c11fc58e1f7094477c2296372af3c13f8d17d6d2d3241f2ec3ab42cf3bc3c24287cca194f8d07c1b88c2b5c801bf329632ceb07cd7c1decbf4cf016994b90ffc
bde6bd6438f7e793e8df05d0e71ad80d508b7d67bd63ad0af0c17c1bf322dc63164c5fda327c1bd6fd3807c7bb9c7bdf0fd6b30dedf6bbf38607f1d6f6a123c6
e794e87e86393a2844eb3619c2bd32026f42df042c17fade293f47c5d42cf3f6add6bf12a70ee7e96f982cdfc3de2a1ce88feac57c124b54f483a7c44a9d2248
87f71dfef87fee9f846bbeef7e2d8e77401c99f54e9517c67df2378916658d64a45ef76a4e01961e797e6bcf1e8d9fd5a8833b89e704274c3b4895cd4e078091
9df97bde79d67983ab55c67e16ba8defc56e8e6051747b30421f8940cf0678f16ef083e0bdf2bc4eae6b88b298f10fc059cf227c2b9d129cf2646ef9d17adead
68bead60f4209489f74239369d2399bca901fcafdf0f7c33c76ef8bebcdea8f3c1293cf12297814c8a7f99e3fc37c5988fe0f57df7a9b1e57d59c3eaf7c5e41f
079b5ecf7c5e1cbc3edb7a93eabeb80b3adf5271574bd7e70ecb2794883e27c10f78d3d1715fdb46c45a17577b6e7933390fad52e877c74cb7e8f4b77485f78c
1b810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000

